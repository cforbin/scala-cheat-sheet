* Cheat Sheet
** TODO data types
** DONE lazy val / val / var
   CLOSED: [2017-05-15 Mon 20:32]
** TODO mutable / immutable collections
   - scala.collection.immutable.
   - scala.collection.mutable
** TODO Option
   - getOrElse
   - orElse
   - Option(null) // None
   - Some(null)   // Some(null)
   - None
   - Option.empty[Int]

** TODO Either
   - since 2.12: right biased, swap
   - fold/getOrElse/
   - toOption/toTry

** TODO Try (scala.util)
   - fold
   - getOrElse
   - orElse
   - recover
   - transform

** TODO Collections methods:
   - collect/collectFirst/find
   - forall/exists
   - map/flatMap/filter
   - head/headOption

** TODO Futures
   - Duration: 2.seconds (import scala.concurrent.durations._)
   - Await.result(future, 42.seconds) // Only once in main, avoid!
   -

** DONE Ranges
   CLOSED: [2017-05-15 Mon 20:37]
   - 1 to 10
   - 1 until 10
   - 1.to(10, 2)

** TODO Comments
   - // and /* */ and /** */

** TODO Pattern Matching
  - list of patterns
  - examples?

** TODO ADTs
  - sealed trait + final case classes

** TODO REPL
   - :t[ype]
   - :he[lp]
   - :h? <string>
   - :imports
   - :implicits
   - :load <path>
   - :paste
   - :quit
   - :reset
   - :kind
** TODO JSON?
** TODO case classes
   - toString
   - unapply
   - apply
   - serializable
   - every param is a val field
** TODO Upper bounds / lower bounds / ...
   - upper: A <: B
   - lower: A >: B
   - careful: lhs introduces a NEW one

** TODO context bounds
   - mostly used for type classes
   - equivalent to implicit parameter list

** TODO implicits
   - rules for search
   - implicit val / def / class
   - implicitly[A]

** TODO String fun:
   - multiline with/out margin
   - raw
   - substitute
   - custom?

** TODO Regex:
   - "foo".r
   - matching of groups

** TODO map / flatMap / (with)Filter, the holy trinity
** TODO for expression / for loop
** DONE imports:
   CLOSED: [2017-05-15 Mon 21:18]
   - import foo.x
   - import foo.{x,y}
   - import foo.x, bar.y
   - import foo._
   - import foo.{Int => FooInt}
   - def foo(x: Class) = { import x._ }
   - wildcard, renaming, everywhere

** TODO typeclasses?
** TODO package clauses
   - almost as in java
   - ... but chainable

** TODO anyval
   - single val and `extends AnyVal`
   - rules for allocation?
** TODO usage of underscores
** TODO "sealed" modifier
** TODO constructors via this
** TODO Modifiers
- private
  - object-private
  - class-private
  - qualified-private
- protected
  - object-protected
- override
- abstract override
- abstract
- final
- sealed
- lazy
** TODO sbt:
   - simple build?
   - compile / test / test:compile / ~test / etc

** TODO implicit evidence:
   - <:<
   - =:=
** TODO objects
   - singletons, lazy init
   - companions
** TODO type hierarchy
   - Any / AnyRef / AnyVal
   - Nothing
** TODO operators and precedence
   - (==) is not as in java reference equality!
   - the name is important
   - the magic colon in the name of defs
   - unary operators
** TODO control structures
   - while (...) { ... }
   - do { ... } while(...)
   - try / catch / finally
** DONE varargs
   CLOSED: [2017-05-16 Tue 21:47]
** TODO type alias / type members
** TODO IntelliJ shortcuts
   - show implicit parameters
   - show implicit conversions
   - ...
** TODO collection performance overview?
** TODO Early definitions
